#include "PmergeMe.hpp"
#include <sys/time.h>
#include <iomanip>

double getTime() {
    struct timeval tv;
    gettimeofday(&tv, NULL);
    return tv.tv_sec * 1000000.0 + tv.tv_usec;
}

// almost all code are generated by claude code lol
int main(int argc, char** argv) {
    if (argc < 2) {
        std::cerr << "Error" << std::endl;
        return 1;
    }
    
    std::vector<int> numbers;
    if (!PmergeMe::parseArguments(argc, argv, numbers)) {
        std::cerr << "Error" << std::endl;
        return 1;
    }
    
    // Display original sequence
    PmergeMe::printSequence(numbers, "Before:");
    
    // Sort with vector
    std::vector<int> vector_copy = numbers;
    double start_time = getTime();
    const int vector_comparisons = PmergeMe::sortContainer(vector_copy);
    const double vector_time = getTime() - start_time;
    
    // Sort with deque
    std::deque<int> deque_copy(numbers.begin(), numbers.end());
    start_time = getTime();
    PmergeMe::sortContainer(deque_copy);
    const double deque_time = getTime() - start_time;
    
    // Display sorted sequence
    PmergeMe::printSequence(vector_copy, "After:");
    
    // Display timing information
    std::cout << std::fixed << std::setprecision(5);
    std::cout << "Time to process a range of " << numbers.size() 
              << " elements with std::vector : " << vector_time << " us" << std::endl;
    std::cout << "Time to process a range of " << numbers.size() 
              << " elements with std::deque : " << deque_time << " us" << std::endl;
    std::cout << "Comparisons :" << vector_comparisons << std::endl;
    
    return 0;
}
